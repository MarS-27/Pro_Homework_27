{"version":3,"file":"index.js","sources":["index.js"],"sourcesContent":["const API = \"https://5dd3d5ba8b5e080014dc4bfa.mockapi.io\";\r\n\r\nconst addForm = document.getElementById(\"addStudentForm\");\r\n\r\nconst controller = async (path, method = \"GET\", body) => {\r\n    let URL = `${API}/${path}`;\r\n    \r\n    const params = {\r\n        method,\r\n        headers: {\r\n            \"content-type\": \"application/json\",\r\n        }\r\n    }\r\n\r\n    if (body) params.body = JSON.stringify(body);\r\n\r\n    let request = await fetch(URL, params);\r\n\r\n    if (request.ok) {\r\n        let responce = await request.json();\r\n        return responce; \r\n    } else {\r\n        alert(`Error ${request.status}! ${request.statusText}`);\r\n    }\r\n} \r\n\r\nasync function studentsList() {\r\n    const studentsArr = await controller(\"students\");\r\n\r\n    studentsArr.map(student => {\r\n        const studenInfo = new Student(student);\r\n        studenInfo.render(); \r\n    })\r\n}\r\n\r\naddForm.addEventListener(\"submit\", async e => {\r\n    e.preventDefault();\r\n\r\n    const studentName = document.getElementById(\"studentName\").value.trim();\r\n\r\n    const body = {\r\n        name: studentName,\r\n    }\r\n\r\n    if (studentName !== \"\") {\r\n        const addStudent = await controller(\"students\", \"POST\", body);\r\n\r\n        if (addStudent) {\r\n            const newStudent = new Student(addStudent);\r\n            newStudent.render();\r\n            addForm.reset();\r\n        }\r\n    } else {\r\n        alert(\"Please, enter student name!\");\r\n    }\r\n})\r\n\r\nclass Student {\r\n    constructor(studentObj){\r\n        for(let key in studentObj) {\r\n            this[key] = studentObj[key];\r\n        }  \r\n    }\r\n\r\n    render() {\r\n        const tBody = document.getElementById(\"tbody\");\r\n       \r\n        const trList = `\r\n            <tr class=\"students__table-rows\" id=\"${this.id}\">\r\n                <td class=\"student__name\">\r\n                    ${this.name}\r\n                    <button class=\"button delete-btn\" id=\"delete-${this.id}\">Delete</button>\r\n                </td>\r\n                ${this.renderRating()}\r\n            </tr>\r\n        `;\r\n\r\n        tBody.insertAdjacentHTML(\"afterbegin\", trList);\r\n\r\n        this.deleteStudent();\r\n        this.changeMark();\r\n    }\r\n\r\n    renderRating() {\r\n        return this.marks.map((mark, i) => {\r\n            return `\r\n                <td>\r\n                    <input class=\"students__marks\" type=\"text\" value=\"${mark}\" id=\"${this.name}_${i}\">\r\n                </td>\r\n            `; \r\n        })\r\n        .join(\"\");\r\n    } \r\n    \r\n    deleteStudent() {\r\n        const deleteBtn = document.getElementById(`delete-${this.id}`);\r\n\r\n        deleteBtn.addEventListener(\"click\", async () => {\r\n            \r\n            const studentInfo = document.getElementById(`${this.id}`);\r\n\r\n            const deleteStudent = await controller(`students/${this.id}`, \"DELETE\");\r\n\r\n            if (deleteStudent.id) {\r\n                studentInfo.remove();\r\n            }\r\n        }) \r\n    }\r\n\r\n    changeMark() {\r\n        this.marks.map((mark, i, arr) => {\r\n            const inputChange = document.getElementById(`${this.name}_${i}`);     \r\n\r\n            inputChange.addEventListener(\"change\", async () => {\r\n\r\n                arr[i] = parseInt(inputChange.value); \r\n\r\n                const body = {\r\n                    marks: arr,\r\n                };\r\n\r\n                await controller(`students/${this.id}`, \"PUT\", body);\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nstudentsList();"],"names":["API","addForm","document","getElementById","controller","async","path","method","body","URL","params","headers","content-type","JSON","stringify","let","request","await","fetch","ok","json","alert","status","statusText","studentsList","studentsArr","map","student","studenInfo","Student","render","addEventListener","e","preventDefault","studentName","value","trim","name","addStudent","newStudent","reset","constructor","studentObj","key","this","tBody","trList","id","renderRating","insertAdjacentHTML","deleteStudent","changeMark","marks","mark","i","join","deleteBtn","studentInfo","remove","arr","inputChange","parseInt"],"mappings":"AAAA,MAAMA,IAAM,8CAENC,QAAUC,SAASC,eAAe,gBAAgB,EAElDC,WAAaC,MAAOC,EAAMC,EAAS,MAAOC,KACxCC,EAAST,IAAH,IAAUM,EAEpB,MAAMI,EAAS,CACXH,OAAAA,EACAI,QAAS,CACLC,eAAgB,kBACpB,CACJ,EAEIJ,IAAME,EAAOF,KAAOK,KAAKC,UAAUN,CAAI,GAE3CO,IAAIC,EAAUC,MAAMC,MAAMT,EAAKC,CAAM,EAErC,GAAIM,EAAQG,GAER,OADeF,MAAMD,EAAQI,KAAK,EAGlCC,eAAeL,EAAQM,WAAWN,EAAQO,UAAY,CAE9D,EAEAlB,eAAemB,eACX,MAAMC,EAAcR,MAAMb,WAAW,UAAU,EAE/CqB,EAAYC,IAAIC,IACZ,MAAMC,EAAa,IAAIC,QAAQF,CAAO,EACtCC,EAAWE,OAAO,CACtB,CAAC,CACL,CAEA7B,QAAQ8B,iBAAiB,SAAgBC,MAAAA,IACrCA,EAAEC,eAAe,EAEjB,IAAMC,EAAchC,SAASC,eAAe,aAAa,EAAEgC,MAAMC,KAAK,EAEhE5B,EAAO,CACT6B,KAAMH,CACV,EAEA,GAAoB,KAAhBA,EAAoB,CACdI,EAAarB,MAAMb,WAAW,WAAY,OAAQI,CAAI,EAE5D,GAAI8B,EAAY,CACZ,MAAMC,EAAa,IAAIV,QAAQS,CAAU,EACzCC,EAAWT,OAAO,EAClB7B,QAAQuC,MAAM,CAClB,CACJ,MACInB,MAAM,6BAA6B,CAE3C,CAAC,QAEKQ,QACFY,YAAYC,GACR,IAAI3B,IAAI4B,KAAOD,EACXE,KAAKD,GAAOD,EAAWC,EAE/B,CAEAb,SACI,MAAMe,EAAQ3C,SAASC,eAAe,OAAO,EAE7C,IAAM2C;mDACqCF,KAAKG;;sBAElCH,KAAKP;mEACwCO,KAAKG;;kBAEtDH,KAAKI,aAAa;;UAI5BH,EAAMI,mBAAmB,aAAcH,CAAM,EAE7CF,KAAKM,cAAc,EACnBN,KAAKO,WAAW,CACpB,CAEAH,eACI,OAAOJ,KAAKQ,MAAM1B,IAAI,CAAC2B,EAAMC;;wEAGmCD,UAAaT,KAAKP,QAAQiB;;aAGzF,EACAC,KAAK,EAAE,CACZ,CAEAL,gBACI,MAAMM,EAAYtD,SAASC,eAAe,UAAUyC,KAAKG,EAAI,EAE7DS,EAAUzB,iBAAiB,QAAS1B,UAEhC,MAAMoD,EAAcvD,SAASC,eAAe,GAAGyC,KAAKG,EAAI,GAElC9B,MAAMb,WAAW,YAAYwC,KAAKG,GAAM,QAAQ,GAEpDA,IACdU,EAAYC,OAAO,CAE3B,CAAC,CACL,CAEAP,aACIP,KAAKQ,MAAM1B,IAAI,CAAC2B,EAAMC,EAAGK,KACrB,MAAMC,EAAc1D,SAASC,eAAkByC,KAAKP,KAAR,IAAgBiB,CAAG,EAE/DM,EAAY7B,iBAAiB,SAAU1B,UAEnCsD,EAAIL,GAAKO,SAASD,EAAYzB,KAAK,EAEnC,IAAM3B,EAAO,CACT4C,MAAOO,CACX,EAEA1C,MAAMb,WAAW,YAAYwC,KAAKG,GAAM,MAAOvC,CAAI,CACvD,CAAC,CACL,CAAC,CACL,CACJ,CAEAgB,aAAa"}